servers = (
  <% @chatnets.each do |chatnet| -%>
  {
    address = "<%= chatnet['address'] %>";
    chatnet = "<%= chatnet['name'] %>";
    port = "<%= chatnet['port'] %>";
    use_ssl = "<%= chatnet['use_ssl'] %>";
    ssl_verify = "<%= chatnet['ssl_verify'] %>";
    autoconnect = "<%= chatnet['autoconnect'] %>";
    <% if chatnet['ssl_capath'] -%>
    ssl_capath = "<%= chatnet['ssl_capath'] %>";
    <% end -%>
    <% if chatnet['password'] -%>
    password = "<%= chatnet['password'] %>";
    <% end -%>
  },
  <% end -%>
);

chatnets = {
  <% @chatnets.each do |chatnet| -%>
  <%= chatnet['name'] %> = {
    type = "<%= chatnet['type'] %>";
    <% if chatnet['nick'] %>
    nick = "<%= chatnet['nick'] %>";
    <% end -%>
    <% if chatnet['username'] %>
    username = "<%= chatnet['username'] %>";
    <% end -%>
    <% if chatnet['realname'] %>
    realname = "<%= chatnet['realname'] %>";
    <% end -%>
  };
  <% end -%>
};

channels = (
  <% @channels.each do |channel| -%>
    {
  <% channel.each do |setting, value| -%>
    <%= setting %> = "<%= value %>";
  <% end -%>
    },
  <% end -%>
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if command -v bc >/dev/null 2>&1\\; then printf '%s=' '$*'\\; echo '$*' | bc -l\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";
  <% @aliases.each do |shortcut, command| -%>
  <%= shortcut %> = "<%= command %>";
  <% end -%>
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    act = "{sb Act: $0-}";
    more = "-- more --";
    hline = "============================================================";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "2";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        user = { };
        window = { };
        window_empty = { };
        char_count = { priority = "-1"; alignment = "right"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    window_hline = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = { hline = { }; };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "<%= @settings['real_name'] %>";
    user_name = "<%= @settings['user_name'] %>";
    nick = "<%= @settings['nick'] %>";
    quit_message = "<%= @settings['quit_message'] %>";
    timestamp_format = "%H:%M:%S";
    settings_autosave = "no";
    log_close_string = "--- Log closed %a %b %d %H:%M:%S %Y";
    log_timestamp = "%H:%M:%S";
    log_open_string = "--- Log opened %a %b %d %H:%M:%S %Y";
    awaylog_level = "NEVER";
    awaylog_file = "/dev/null";
  };
  "fe-text" = { actlist_sort = "refnum"; paste_join_multiline = "no"; };
  "fe-common/core" = {
    term_charset = "utf-8";
    autolog = "<%= @settings['autolog'] %>";
    autolog_level = "<%= @settings['autolog_level'] %>";
    autolog_path = "<%= @instance_logdir %>/<%= @settings['autolog_path_tag'] %>";
    theme = "<%= @settings['theme'] %>";
    hilight_color = "%R";
    <% if @settings['activity_hide_level'] -%>
    # Do not allow the following to trigger channel activity
    activity_hide_level = "<%= @settings['activity_hide_level'] %>";
    <% end -%>
    <% if @settings['activity_hide_targets'] -%>
    # Do not allow anything in these channels to trigger channel activity
    activity_hide_targets = "<%= @settings['activity_hide_targets'] %>";
    <% end -%>
  };
  "perl/core/scripts" = {
    awl_shared_sbar = "OFF";
    awl_viewer = "no";
    spell_dict = "en_US";
    awl_block = "15";
    awl_display_key = "$Q%K|%n$H$C$S";
    awl_display_key_active = "$Q%K|%n$H%U$C%n$S";
    hilightwin_showprivmsg = "no";
  };
  "fe-common/xmpp" = {
    xmpp_status_window = "yes";
    xmpp_send_composing = "no";
  };
  "xmpp/core" = { xmpp_set_nick_as_username = "yes"; };
};
logs = { };
windows = {
  <% @windows.each do |window_position, settings| -%>
  <%= window_position %> = {
    <% if settings['immortal'] -%>
    immortal = "<%= settings['immortal'] %>";
    <% end -%>
    name = "<%= settings['name'] %>";
    <% if settings['level'] -%>
    level = "<%= settings['level'] %>";
    <% end -%>
    <% if settings['sticky'] -%>
    sticky = "<%= settings['sticky'] %>";
    <% end -%>
    <% if settings['parent'] -%>
    parent = "<%= settings['parent'] %>";
    <% end -%>
  };
  <% end -%>
};
hilights = (
  <% @hilights.each do |hilight| -%>
  {
  <% hilight.each do |setting, value| -%>
    <%= setting %> = "<%= value %>";
  <% end -%>
  },
  <% end -%>
);
ignores = (
  <% @ignores.each do |ignore| -%>
  {
  <% ignore.each do |setting, value| -%>
    <% if setting == "channels" -%>
    <%= setting %> = <%= value %>;
  <% else %>
    <%= setting %> = "<%= value %>";
    <% end -%>
  <% end -%>
  },
  <% end -%>
);
notifies = {
  <% @notifies.each do |mask, settings| -%>
  <%= mask %> =
  {
  <% settings.each do |setting, value| -%>
    <% if setting == "ircnets" -%>
    <%= setting %> = <%= value %>;
  <% else %>
    <%= setting %> = "<%= value %>";
    <% end -%>
  <% end -%>
  };
  <% end -%>
};
